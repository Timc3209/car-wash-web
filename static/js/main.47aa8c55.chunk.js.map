{"version":3,"sources":["assets/images/default-company.jpg","redux/reducers/authReducer.ts","redux/reducers/estimateReducer.ts","redux/reducers/index.ts","redux/types/authTypes.ts","redux/types/estimateTypes.ts","redux/store.ts","components/LocationAutocomplete.tsx","test/data.ts","components/EstimateAddress.tsx","redux/actions/estimateActions.ts","components/Header.tsx","scenes/Landing.tsx","components/Company.tsx","components/CompanyList.tsx","scenes/Estimate.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","INITIAL_STATE","id","username","token","loggedIn","address","companies","rootReducer","combineReducers","auth","state","action","type","payload","estimate","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","store","createStore","persistor","persistStore","purge","props","onChange","setRef","ref","placeholder","className","options","appId","process","ALGOLIA_APP_ID","apiKey","ALGOLIA_APP_KEY","language","countries","aroundLatLng","aroundLatLngViaIP","suggestion","value","onLimit","console","log","onError","name","desc","street","city","zip","country","phone","email","EstimateAddress","inputRef","createRef","onAddressChanged","history","estimateSuccess","push","this","match","params","search","autocomplete","setVal","LocationAutocomplete","React","Component","mapDispatchToProps","ConnectedComponent","connect","withRouter","Header","fixed","showSearch","Navbar","color","dark","expand","NavbarBrand","href","Nav","navbar","NavItem","NavLink","to","Landing","Container","Row","Col","Form","sm","md","Button","size","block","Company","Card","body","CardImg","src","defaultLogo","width","alt","CardTitle","CardText","CompanyList","title","map","company","index","Fragment","lg","Estimate","undefined","Router","exact","path","component","App","loading","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47aa8c55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default-company.b58786c6.jpg\";","import { LOGIN_SUCCESS, LOGOUT, AuthState, AuthActionTypes } from \"../types\";\n\nexport const INITIAL_STATE: AuthState = {\n  id: \"0\",\n  username: \"\",\n  token: \"\",\n  loggedIn: false,\n};\n\nexport const INITIAL_STATE_LOGGED: AuthState = {\n  id: \"demo\",\n  username: \"demo\",\n  token: \"demo\",\n  loggedIn: true,\n};\n\nexport function reducer(state = INITIAL_STATE, action: AuthActionTypes) {\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        id: action.payload.id,\n        username: action.payload.username,\n        token: action.payload.token,\n        loggedIn: action.payload.loggedIn,\n      };\n    case LOGOUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n}\n","import { ESTIMATE_SUCCESS, EstimateState, EstimateActionTypes } from \"../types\";\n\nexport const INITIAL_STATE: EstimateState = {\n  address: \"\",\n  companies: [],\n};\n\nexport function reducer(state = INITIAL_STATE, action: EstimateActionTypes) {\n  switch (action.type) {\n    case ESTIMATE_SUCCESS:\n      return {\n        ...state,\n        address: action.payload.address,\n        companies: action.payload.companies,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport * as authReducer from \"./authReducer\";\nimport * as estimateReducer from \"./estimateReducer\";\nimport { AuthState, EstimateState } from \"../types\";\n\nexport interface AppState {\n  auth: AuthState;\n  estimate: EstimateState;\n}\n\nexport const AppInitialState: AppState = {\n  auth: authReducer.INITIAL_STATE,\n  estimate: estimateReducer.INITIAL_STATE,\n};\n\nexport const rootReducer = combineReducers({\n  auth: authReducer.reducer,\n  estimate: estimateReducer.reducer,\n});\n","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGOUT = \"LOGOUT\";\n\nexport interface AuthState {\n  id: string;\n  username: string;\n  token: string;\n  loggedIn: boolean;\n}\n\ninterface LoginSuccessAction {\n  type: typeof LOGIN_SUCCESS;\n  payload: AuthState;\n}\n\nexport interface LogoutAction {\n  type: typeof LOGOUT;\n}\n\nexport type AuthActionTypes = LoginSuccessAction | LogoutAction;\n","export const ESTIMATE_SUCCESS = \"ESTIMATE_SUCCESS\";\n\nexport interface CompanyState {\n  name: string;\n  desc: string;\n  street: string;\n  city: string;\n  state: string;\n  zip: string;\n  country: string;\n  phone: string;\n  email: string;\n}\n\nexport interface EstimateState {\n  address: string;\n  companies: Array<CompanyState>;\n}\n\ninterface EstimateSuccessAction {\n  type: typeof ESTIMATE_SUCCESS;\n  payload: EstimateState;\n}\n\nexport type EstimateActionTypes = EstimateSuccessAction;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\nimport { AppState, rootReducer } from \"./reducers\";\n\nconst persistConfig = {\n  key: \"main\",\n  storage,\n  blacklist: [\"estimate\"],\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst persistedReducer = persistReducer<AppState, any>(\n  persistConfig,\n  rootReducer\n);\n\nconst middleware = applyMiddleware(thunk);\nconst store = createStore(persistedReducer, middleware);\nconst persistor = persistStore(store);\npersistor.purge();\nexport { store, persistor };\n","import React from \"react\";\nimport AlgoliaPlaces from \"algolia-places-react\";\n\ninterface Props {\n  onChange: (address: string) => void;\n  setRef?: any;\n}\n\ninterface OnChangeProps {\n  query: string;\n  suggestion: { value: string };\n}\n\nexport default (props: Props) => {\n  const { onChange, setRef } = props;\n  return (\n    <AlgoliaPlaces\n      ref={setRef && setRef}\n      placeholder=\"Write an address here\"\n      className=\"form-control-lg form-control\"\n      options={{\n        appId: process.env.ALGOLIA_APP_ID,\n        apiKey: process.env.ALGOLIA_APP_KEY,\n        language: \"en\",\n        countries: [\"us\"],\n        aroundLatLng: \"29.5652,-98.3364\",\n        aroundLatLngViaIP: false,\n        type: \"address\",\n      }}\n      onChange={({ suggestion }: OnChangeProps) => onChange(suggestion.value)}\n      onLimit={() =>\n        console.log(\"Fired when you reached your current rate limit.\")\n      }\n      onError={() =>\n        console.log(\n          \"Fired when we could not make the request to Algolia Places servers for any reason but reaching your rate limit.\"\n        )\n      }\n    />\n  );\n};\n","import { CompanyState } from \"../redux/types\";\n\nexport const companies: Array<CompanyState> = [\n  {\n    name: \"Dream Wash\",\n    desc:\n      \"The Dream Car Wash is one of the most reliable car wash and detailing businesses in San Antonio, TX\",\n    street: \"500 Trumbal\",\n    city: \"Live Oak\",\n    state: \"Texas\",\n    zip: \"78233\",\n    country: \"USA\",\n    phone: \"2104444444\",\n    email: \"support@dreamwash.com\",\n  },\n  {\n    name: \"Jet Wash\",\n    desc:\n      \"The Jet Car Wash is one of the most reliable car wash and detailing businesses in San Antonio, TX\",\n    street: \"500 Trumbal\",\n    city: \"Live Oak\",\n    state: \"Texas\",\n    zip: \"78233\",\n    country: \"USA\",\n    phone: \"2104444444\",\n    email: \"support@jetwash.com\",\n  },\n  {\n    name: \"Fast Wash\",\n    desc:\n      \"The Fast Car Wash is one of the most reliable car wash and detailing businesses in San Antonio, TX\",\n    street: \"500 Trumbal\",\n    city: \"Live Oak\",\n    state: \"Texas\",\n    zip: \"78233\",\n    country: \"USA\",\n    phone: \"2104444444\",\n    email: \"support@fastwash.com\",\n  },\n  {\n    name: \"Dream Wash\",\n    desc:\n      \"The Dream Car Wash is one of the most reliable car wash and detailing businesses in San Antonio, TX\",\n    street: \"500 Trumbal\",\n    city: \"Live Oak\",\n    state: \"Texas\",\n    zip: \"78233\",\n    country: \"USA\",\n    phone: \"2104444444\",\n    email: \"support@dreamwash.com\",\n  },\n  {\n    name: \"Jet Wash\",\n    desc:\n      \"The Jet Car Wash is one of the most reliable car wash and detailing businesses in San Antonio, TX\",\n    street: \"500 Trumbal\",\n    city: \"Live Oak\",\n    state: \"Texas\",\n    zip: \"78233\",\n    country: \"USA\",\n    phone: \"2104444444\",\n    email: \"support@jetwash.com\",\n  },\n  {\n    name: \"Fast Wash\",\n    desc:\n      \"The Fast Car Wash is one of the most reliable car wash and detailing businesses in San Antonio, TX\",\n    street: \"500 Trumbal\",\n    city: \"Live Oak\",\n    state: \"Texas\",\n    zip: \"78233\",\n    country: \"USA\",\n    phone: \"2104444444\",\n    email: \"support@fastwash.com\",\n  },\n];\n","import React, { createRef } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport { estimateSuccess } from \"../redux/actions\";\nimport { AppState } from \"../redux/reducers\";\nimport LocationAutocomplete from \"./LocationAutocomplete\";\nimport { companies } from \"../test/data\";\n\ntype MatchProps = {\n  search: string;\n};\n\ninterface Props extends RouteComponentProps<MatchProps> {\n  estimateSuccess: typeof estimateSuccess;\n  address: string;\n}\n\nclass EstimateAddress extends React.Component<Props, any> {\n  private inputRef: any = createRef();\n\n  componentDidMount() {\n    const { match, estimateSuccess } = this.props;\n    const address: any = match.params.search;\n\n    if (address) {\n      const estimateData = { address, companies };\n      estimateSuccess(estimateData);\n      this.inputRef.autocomplete.setVal(address);\n    }\n  }\n\n  onAddressChanged = (address: string) => {\n    const { history, estimateSuccess } = this.props;\n    const estimateData = { address, companies };\n    estimateSuccess(estimateData);\n    history.push(\"/Estimate/\" + address);\n  };\n\n  setRef = (ref: any) => {\n    this.inputRef = ref;\n  };\n\n  render() {\n    return (\n      <LocationAutocomplete\n        setRef={this.setRef}\n        onChange={this.onAddressChanged}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ estimate }: AppState) => {\n  const { address } = estimate;\n  return { address };\n};\n\nconst mapDispatchToProps = {\n  estimateSuccess,\n};\n\nconst ConnectedComponent = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EstimateAddress);\n\nexport default withRouter(ConnectedComponent);\n","import { ESTIMATE_SUCCESS, EstimateState } from \"../types\";\n\nexport const estimateSuccess = (payload: EstimateState) => {\n  return {\n    type: ESTIMATE_SUCCESS,\n    payload,\n  };\n};\n","import React from \"react\";\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\nimport EstimateAddress from \"./EstimateAddress\";\n\ninterface Props {\n  fixed?: string;\n  showSearch: boolean;\n}\n\nexport default class Header extends React.Component<Props, any> {\n  render() {\n    const { fixed, showSearch } = this.props;\n    return (\n      <div className=\"header-container\">\n        <Navbar color=\"dark\" dark expand=\"md\" fixed={fixed}>\n          <NavbarBrand href=\"/\">Car Wash</NavbarBrand>\n          {showSearch && (\n            <div className=\"navbar-search desktop-only\">\n              <EstimateAddress />\n            </div>\n          )}\n          <div className=\"navbar-right\">\n            <Nav navbar>\n              <NavItem>\n                <NavLink to=\"/Estimate/sdadsa\" className=\"nav-link\">\n                  Sign In\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </div>\n        </Navbar>\n        {showSearch && (\n          <div className=\"navbar-search-mobile mobile-only\">\n            <EstimateAddress />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Container, Row, Col, Form, Button } from \"reactstrap\";\nimport Header from \"../components/Header\";\nimport EstimateAddress from \"../components/EstimateAddress\";\n\ninterface Props {}\n\ninterface States {}\n\nclass Landing extends React.Component<Props, States> {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header fixed=\"top\" showSearch={false} />\n        <main className=\"landing-background\">\n          <div className=\"overlay\"></div>\n          <Container>\n            <Row>\n              <Col>\n                <h1 className=\"mb-5 text-white\">Get a car wash estimate</h1>\n              </Col>\n            </Row>\n            <Form>\n              <Row>\n                <Col sm=\"12\" md=\"9\" className=\"mb-4\">\n                  <EstimateAddress />\n                </Col>\n                <Col sm=\"12\" md=\"3\">\n                  <Button color=\"primary\" size=\"lg\" block>\n                    Get Estimate\n                  </Button>\n                </Col>\n              </Row>\n            </Form>\n          </Container>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","import React from \"react\";\nimport { Card, CardTitle, CardImg, CardText, Button, Col } from \"reactstrap\";\nimport { CompanyState } from \"../redux/types\";\nimport defaultLogo from \"../assets/images/default-company.jpg\";\n\nconst Company = ({ name, desc }: CompanyState) => (\n  <Card className=\"box-shadow mt-2 mb-2\" body>\n    <CardImg src={defaultLogo} width=\"100\" alt=\"Card image cap\" />\n    <CardTitle>\n      <span className=\"h4 float-left mt-2\">{name}</span>\n    </CardTitle>\n    <CardText>{desc}</CardText>\n  </Card>\n);\n\nexport default Company;\n","import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport Company from \"./Company\";\nimport { CompanyState } from \"../redux/types\";\n\ninterface Props {\n  title: string;\n  companies: Array<CompanyState>;\n}\n\nexport default class CompanyList extends React.Component<Props, any> {\n  render() {\n    const { title, companies } = this.props;\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1 className=\"mt-4 mb-4\">{title}</h1>\n          </Col>\n        </Row>\n        <Row>\n          {companies.map((company: CompanyState, index: number) => {\n            if (index % 3 === 0 && index !== 0) {\n              return (\n                <React.Fragment>\n                  <div className=\"w-100\"></div>\n                  <Col key={index} sm=\"12\" lg=\"4\">\n                    <Company\n                      name={company.name}\n                      desc={company.desc}\n                      street=\"\"\n                      city=\"\"\n                      state=\"\"\n                      zip=\"\"\n                      country=\"\"\n                      phone=\"\"\n                      email=\"\"\n                    />\n                  </Col>\n                </React.Fragment>\n              );\n            } else {\n              return (\n                <Col key={index} sm=\"12\" lg=\"4\">\n                  <Company\n                    name={company.name}\n                    desc={company.desc}\n                    street=\"\"\n                    city=\"\"\n                    state=\"\"\n                    zip=\"\"\n                    country=\"\"\n                    phone=\"\"\n                    email=\"\"\n                  />\n                </Col>\n              );\n            }\n          })}\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../redux/reducers\";\nimport { CompanyState } from \"../redux/types\";\nimport Header from \"../components/Header\";\nimport CompanyList from \"../components/CompanyList\";\n\ninterface Props {\n  address: string;\n  companies: Array<CompanyState>;\n}\n\nclass Estimate extends React.Component<Props> {\n  render() {\n    const { companies } = this.props;\n    return (\n      <div className=\"App\">\n        <Header showSearch={true} />\n        <CompanyList title=\"Local Results\" companies={companies} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ estimate }: AppState) => {\n  const { address, companies } = estimate;\n  return { address, companies };\n};\n\nexport default connect(mapStateToProps, undefined)(Estimate);\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Landing from \"./scenes/Landing\";\nimport Estimate from \"./scenes/Estimate\";\n\ninterface Props {}\n\nexport default class Router extends React.Component<Props> {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route path=\"/estimate/:search\" component={Estimate} />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\nimport Router from \"./Router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./assets/css/App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Router />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./assets/css/App.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}