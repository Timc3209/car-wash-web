{"version":3,"sources":["redux/reducers/authReducer.ts","redux/reducers/index.ts","redux/types/authTypes.ts","redux/store.ts","components/Header.tsx","components/LocationAutocomplete.tsx","scenes/Landing.tsx","scenes/Estimate.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["INITIAL_STATE","id","username","token","loggedIn","rootReducer","combineReducers","auth","state","action","type","payload","persistConfig","key","storage","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","store","createStore","persistor","persistStore","Header","fixed","this","props","Navbar","color","dark","expand","NavbarBrand","href","className","Nav","navbar","NavItem","NavLink","to","React","Component","onChange","placeholder","options","appId","process","ALGOLIA_APP_ID","apiKey","ALGOLIA_APP_KEY","language","countries","aroundLatLng","aroundLatLngViaIP","suggestion","value","onLimit","console","log","onError","Landing","address","onAddressChanged","setState","history","push","handleSubmit","e","preventDefault","Container","Row","Col","Form","onSubmit","sm","md","LocationAutocomplete","Button","size","block","withRouter","Estimate","match","params","search","Router","exact","path","component","App","loading","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e907dfa.chunk.js","sourcesContent":["import { LOGIN_SUCCESS, LOGOUT, AuthState, AuthActionTypes } from \"../types\";\n\nexport const INITIAL_STATE: AuthState = {\n  id: \"0\",\n  username: \"\",\n  token: \"\",\n  loggedIn: false,\n};\n\nexport const INITIAL_STATE_LOGGED: AuthState = {\n  id: \"demo\",\n  username: \"demo\",\n  token: \"demo\",\n  loggedIn: true,\n};\n\nexport function reducer(state = INITIAL_STATE, action: AuthActionTypes) {\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        id: action.payload.id,\n        username: action.payload.username,\n        token: action.payload.token,\n        loggedIn: action.payload.loggedIn,\n      };\n    case LOGOUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport * as authReducer from \"./authReducer\";\nimport { AuthState } from \"../types\";\n\nexport interface AppState {\n  auth: AuthState;\n}\n\nexport const AppInitialState: AppState = {\n  auth: authReducer.INITIAL_STATE,\n};\n\nexport const rootReducer = combineReducers({\n  auth: authReducer.reducer,\n});\n","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGOUT = \"LOGOUT\";\n\nexport interface AuthState {\n  id: string;\n  username: string;\n  token: string;\n  loggedIn: boolean;\n}\n\ninterface LoginSuccessAction {\n  type: typeof LOGIN_SUCCESS;\n  payload: AuthState;\n}\n\nexport interface LogoutAction {\n  type: typeof LOGOUT;\n}\n\nexport type AuthActionTypes = LoginSuccessAction | LogoutAction;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\nimport { AppState, rootReducer } from \"./reducers\";\n\nconst persistConfig = {\n  key: \"main\",\n  storage,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst persistedReducer = persistReducer<AppState, any>(\n  persistConfig,\n  rootReducer\n);\n\nconst middleware = applyMiddleware(thunk);\nconst store = createStore(persistedReducer, middleware);\nconst persistor = persistStore(store);\nexport { store, persistor };\n","import React from \"react\";\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\n\ninterface Props {\n  fixed?: string;\n}\n\nexport default class Header extends React.Component<Props, any> {\n  render() {\n    const { fixed } = this.props;\n    return (\n      <Navbar color=\"dark\" dark expand=\"md\" fixed={fixed}>\n        <NavbarBrand href=\"/\">Car Wash</NavbarBrand>\n        <div className=\"navbar-right\">\n          <Nav navbar>\n            <NavItem>\n              <NavLink to=\"/taskBoard\" className=\"nav-link\">\n                Sign In\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </div>\n      </Navbar>\n    );\n  }\n}\n","import React from \"react\";\nimport AlgoliaPlaces from \"algolia-places-react\";\n\ninterface Props {\n  onChange: (address: string) => void;\n}\n\ninterface OnChangeProps {\n  query: string;\n  suggestion: { value: string };\n}\n\nexport default (props: Props) => {\n  const { onChange } = props;\n  return (\n    <AlgoliaPlaces\n      placeholder=\"Write an address here\"\n      className=\"form-control-lg form-control\"\n      options={{\n        appId: process.env.ALGOLIA_APP_ID,\n        apiKey: process.env.ALGOLIA_APP_KEY,\n        language: \"en\",\n        countries: [\"us\"],\n        aroundLatLng: \"29.5652,-98.3364\",\n        aroundLatLngViaIP: false,\n        type: \"address\",\n      }}\n      onChange={({ suggestion }: OnChangeProps) => onChange(suggestion.value)}\n      onLimit={() =>\n        console.log(\"Fired when you reached your current rate limit.\")\n      }\n      onError={() =>\n        console.log(\n          \"Fired when we could not make the request to Algolia Places servers for any reason but reaching your rate limit.\"\n        )\n      }\n    />\n  );\n};\n","import React from \"react\";\nimport { Container, Row, Col, Form, Input, Button } from \"reactstrap\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport Header from \"../components/Header\";\nimport LocationAutocomplete from \"../components/LocationAutocomplete\";\n\ninterface Props extends RouteComponentProps {}\n\ninterface States {\n  address: string;\n}\n\nclass Landing extends React.Component<Props, States> {\n  readonly state: States = {\n    address: \"\",\n  };\n\n  onAddressChanged = (address: string) => {\n    this.setState({ address: address });\n    this.props.history.push(\"/Estimate/\" + address);\n  };\n\n  handleSubmit = (e: any) => {\n    e.preventDefault();\n\n    if (this.state.address === \"\") {\n      return false;\n    }\n\n    this.props.history.push(\"/Estimate/\" + this.state.address);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header fixed=\"top\" />\n        <main className=\"landing-background\">\n          <div className=\"overlay\"></div>\n          <Container>\n            <Row>\n              <Col>\n                <h1 className=\"mb-5 text-white\">Get a car wash estimate</h1>\n              </Col>\n            </Row>\n            <Form onSubmit={this.handleSubmit}>\n              <Row>\n                <Col sm=\"12\" md=\"9\" className=\"mb-4\">\n                  <LocationAutocomplete onChange={this.onAddressChanged} />\n                </Col>\n                <Col sm=\"12\" md=\"3\">\n                  <Button color=\"primary\" size=\"lg\" block>\n                    Get Estimate\n                  </Button>\n                </Col>\n              </Row>\n            </Form>\n          </Container>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Landing);\n","import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport Header from \"../components/Header\";\n\ntype MatchProps = {\n  search: string;\n};\n\ninterface Props extends RouteComponentProps<MatchProps> {}\n\ninterface States {\n  address: string;\n}\n\nclass Estimate extends React.Component<Props, States> {\n  readonly state: States = {\n    address: \"\",\n  };\n\n  componentDidMount() {\n    const address: any = this.props.match.params.search;\n    this.setState({ address: address });\n  }\n\n  render() {\n    const { address } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <Container>\n          <Row>\n            <Col>\n              <h1 className=\"mb-5\">Local Results: {address}</h1>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Estimate);\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Landing from \"./scenes/Landing\";\nimport Estimate from \"./scenes/Estimate\";\n\ninterface Props {}\n\nexport default class Router extends React.Component<Props> {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Landing} />\n          <Route path=\"/estimate/:search\" component={Estimate} />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\nimport Router from \"./Router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./assets/css/App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Router />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./assets/css/App.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}